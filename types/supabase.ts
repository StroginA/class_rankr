/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/": {
    get: {
      responses: {
        /** OK */
        200: unknown;
      };
    };
  };
  "/sessions": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.sessions.id"];
          created_at?: parameters["rowFilter.sessions.created_at"];
          tallied_at?: parameters["rowFilter.sessions.tallied_at"];
          name?: parameters["rowFilter.sessions.name"];
          avatar?: parameters["rowFilter.sessions.avatar"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["sessions"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** sessions */
          sessions?: definitions["sessions"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.sessions.id"];
          created_at?: parameters["rowFilter.sessions.created_at"];
          tallied_at?: parameters["rowFilter.sessions.tallied_at"];
          name?: parameters["rowFilter.sessions.name"];
          avatar?: parameters["rowFilter.sessions.avatar"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.sessions.id"];
          created_at?: parameters["rowFilter.sessions.created_at"];
          tallied_at?: parameters["rowFilter.sessions.tallied_at"];
          name?: parameters["rowFilter.sessions.name"];
          avatar?: parameters["rowFilter.sessions.avatar"];
        };
        body: {
          /** sessions */
          sessions?: definitions["sessions"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/users": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.users.id"];
          session_id?: parameters["rowFilter.users.session_id"];
          name?: parameters["rowFilter.users.name"];
          gender?: parameters["rowFilter.users.gender"];
          invite_code?: parameters["rowFilter.users.invite_code"];
          invite_used?: parameters["rowFilter.users.invite_used"];
          is_admin?: parameters["rowFilter.users.is_admin"];
          avatar?: parameters["rowFilter.users.avatar"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["users"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** users */
          users?: definitions["users"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.users.id"];
          session_id?: parameters["rowFilter.users.session_id"];
          name?: parameters["rowFilter.users.name"];
          gender?: parameters["rowFilter.users.gender"];
          invite_code?: parameters["rowFilter.users.invite_code"];
          invite_used?: parameters["rowFilter.users.invite_used"];
          is_admin?: parameters["rowFilter.users.is_admin"];
          avatar?: parameters["rowFilter.users.avatar"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.users.id"];
          session_id?: parameters["rowFilter.users.session_id"];
          name?: parameters["rowFilter.users.name"];
          gender?: parameters["rowFilter.users.gender"];
          invite_code?: parameters["rowFilter.users.invite_code"];
          invite_used?: parameters["rowFilter.users.invite_used"];
          is_admin?: parameters["rowFilter.users.is_admin"];
          avatar?: parameters["rowFilter.users.avatar"];
        };
        body: {
          /** users */
          users?: definitions["users"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/likes": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.likes.id"];
          sender_id?: parameters["rowFilter.likes.sender_id"];
          receiver_id?: parameters["rowFilter.likes.receiver_id"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["likes"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** likes */
          likes?: definitions["likes"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.likes.id"];
          sender_id?: parameters["rowFilter.likes.sender_id"];
          receiver_id?: parameters["rowFilter.likes.receiver_id"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.likes.id"];
          sender_id?: parameters["rowFilter.likes.sender_id"];
          receiver_id?: parameters["rowFilter.likes.receiver_id"];
        };
        body: {
          /** likes */
          likes?: definitions["likes"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
}

export interface definitions {
  /** @description Defines a single Class_RankR lobby */
  sessions: {
    /**
     * Format: bigint
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    id: number;
    /**
     * Format: timestamp with time zone
     * @default now()
     */
    created_at: string;
    /** Format: timestamp with time zone */
    tallied_at?: string;
    /** Format: character varying */
    name: string;
    /** Format: character varying */
    avatar?: string;
  };
  users: {
    /**
     * Format: bigint
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    id: number;
    /**
     * Format: bigint
     * @description Note:
     * This is a Foreign Key to `sessions.id`.<fk table='sessions' column='id'/>
     */
    session_id: number;
    /** Format: character varying */
    name: string;
    /**
     * Format: character varying
     * @default m''::character varying
     */
    gender: string;
    /**
     * Format: uuid
     * @default extensions.uuid_generate_v4()
     */
    invite_code: string;
    /**
     * Format: boolean
     * @default false
     */
    invite_used: boolean;
    /**
     * Format: boolean
     * @default false
     */
    is_admin: boolean;
    /** Format: text */
    avatar?: string;
  };
  likes: {
    /**
     * Format: bigint
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    id: number;
    /**
     * Format: bigint
     * @description Note:
     * This is a Foreign Key to `users.id`.<fk table='users' column='id'/>
     */
    sender_id: number;
    /**
     * Format: bigint
     * @description Note:
     * This is a Foreign Key to `users.id`.<fk table='users' column='id'/>
     */
    receiver_id: number;
  };
}

export interface parameters {
  /**
   * @description Preference
   * @enum {string}
   */
  preferParams: "params=single-object";
  /**
   * @description Preference
   * @enum {string}
   */
  preferReturn: "return=representation" | "return=minimal" | "return=none";
  /**
   * @description Preference
   * @enum {string}
   */
  preferCount: "count=none";
  /** @description Filtering Columns */
  select: string;
  /** @description On Conflict */
  on_conflict: string;
  /** @description Ordering */
  order: string;
  /** @description Limiting and Pagination */
  range: string;
  /**
   * @description Limiting and Pagination
   * @default items
   */
  rangeUnit: string;
  /** @description Limiting and Pagination */
  offset: string;
  /** @description Limiting and Pagination */
  limit: string;
  /** @description sessions */
  "body.sessions": definitions["sessions"];
  /** Format: bigint */
  "rowFilter.sessions.id": string;
  /** Format: timestamp with time zone */
  "rowFilter.sessions.created_at": string;
  /** Format: timestamp with time zone */
  "rowFilter.sessions.tallied_at": string;
  /** Format: character varying */
  "rowFilter.sessions.name": string;
  /** Format: character varying */
  "rowFilter.sessions.avatar": string;
  /** @description users */
  "body.users": definitions["users"];
  /** Format: bigint */
  "rowFilter.users.id": string;
  /** Format: bigint */
  "rowFilter.users.session_id": string;
  /** Format: character varying */
  "rowFilter.users.name": string;
  /** Format: character varying */
  "rowFilter.users.gender": string;
  /** Format: uuid */
  "rowFilter.users.invite_code": string;
  /** Format: boolean */
  "rowFilter.users.invite_used": string;
  /** Format: boolean */
  "rowFilter.users.is_admin": string;
  /** Format: text */
  "rowFilter.users.avatar": string;
  /** @description likes */
  "body.likes": definitions["likes"];
  /** Format: bigint */
  "rowFilter.likes.id": string;
  /** Format: bigint */
  "rowFilter.likes.sender_id": string;
  /** Format: bigint */
  "rowFilter.likes.receiver_id": string;
}

export interface operations {}

export interface external {}
